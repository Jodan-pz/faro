/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.3.0 (NJsonSchema v10.6.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class BaseClientProxy {
  public static defaultHeaders: { [key: string]: string };
  protected transformOptions(options_: any) {
    // add creds
    options_.credentials = 'include';
    options_.mode = 'cors';
    if (BaseClientProxy.defaultHeaders) {
      options_.headers = { ...options_.headers, ...BaseClientProxy.defaultHeaders };
    }
    return Promise.resolve(options_);
  }

}

export class AggregatorClient extends BaseClientProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAggregatorUsage(id: string): Promise<ImageUsageCollectionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Aggregator/{id}/usage";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAggregatorUsage(_response);
        });
    }

    protected processGetAggregatorUsage(response: Response): Promise<ImageUsageCollectionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ImageUsageCollectionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ImageUsageCollectionWrappedServiceResult>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @param filterMatchMode (optional) 0 = StartsWith

    1 = Contains

    2 = Exact
     * @param tags (optional) 
     * @param tagsMatchMode (optional) 0 = Any

    1 = All
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    list(filter: string | undefined, filterMatchMode: FilterMatchMode | undefined, tags: string[] | undefined, tagsMatchMode: TagsMatchMode | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<AggregatorDefinitionIEnumerableWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Aggregator/search?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterMatchMode === null)
            throw new Error("The parameter 'filterMatchMode' cannot be null.");
        else if (filterMatchMode !== undefined)
            url_ += "filterMatchMode=" + encodeURIComponent("" + filterMatchMode) + "&";
        if (tags === null)
            throw new Error("The parameter 'tags' cannot be null.");
        else if (tags !== undefined)
            tags && tags.forEach(item => { url_ += "tags=" + encodeURIComponent("" + item) + "&"; });
        if (tagsMatchMode === null)
            throw new Error("The parameter 'tagsMatchMode' cannot be null.");
        else if (tagsMatchMode !== undefined)
            url_ += "tagsMatchMode=" + encodeURIComponent("" + tagsMatchMode) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processList(_response);
        });
    }

    protected processList(response: Response): Promise<AggregatorDefinitionIEnumerableWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AggregatorDefinitionIEnumerableWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AggregatorDefinitionIEnumerableWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    getById(id: string): Promise<AggregatorDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Aggregator/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<AggregatorDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AggregatorDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AggregatorDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(id: string, body: AggregatorDefinition | undefined): Promise<AggregatorDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Aggregator/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<AggregatorDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AggregatorDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AggregatorDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: string): Promise<BooleanWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Aggregator/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<BooleanWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <BooleanWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: AggregatorDefinition | undefined): Promise<AggregatorDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Aggregator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<AggregatorDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AggregatorDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AggregatorDefinitionWrappedServiceResult>(<any>null);
    }
}

export class DataResourceClient extends BaseClientProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param kind (optional) 
     * @param relativePath (optional) 
     * @param file (optional) 
     * @return Success
     */
    uploadData(kind: string | undefined, relativePath: string | undefined, file: FileParameter | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/DataResource/upload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (kind === null || kind === undefined)
            throw new Error("The parameter 'kind' cannot be null.");
        else
            content_.append("Kind", kind.toString());
        if (relativePath === null || relativePath === undefined)
            throw new Error("The parameter 'relativePath' cannot be null.");
        else
            content_.append("RelativePath", relativePath.toString());
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("File", file.data, file.fileName ? file.fileName : "File");

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUploadData(_response);
        });
    }

    protected processUploadData(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class DecoratorClient extends BaseClientProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getDecoratorUsage(id: string): Promise<DecoratorUsageCollectionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Decorator/{id}/usage";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetDecoratorUsage(_response);
        });
    }

    protected processGetDecoratorUsage(response: Response): Promise<DecoratorUsageCollectionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <DecoratorUsageCollectionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DecoratorUsageCollectionWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    run(id: string, body: { [key: string]: any; } | undefined): Promise<StringObjectIDictionaryWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Decorator/{id}/run";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRun(_response);
        });
    }

    protected processRun(response: Response): Promise<StringObjectIDictionaryWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <StringObjectIDictionaryWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StringObjectIDictionaryWrappedServiceResult>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @param filterMatchMode (optional) 0 = StartsWith

    1 = Contains

    2 = Exact
     * @param tags (optional) 
     * @param tagsMatchMode (optional) 0 = Any

    1 = All
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    list(filter: string | undefined, filterMatchMode: FilterMatchMode | undefined, tags: string[] | undefined, tagsMatchMode: TagsMatchMode | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<DecoratorDefinitionIEnumerableWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Decorator/search?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterMatchMode === null)
            throw new Error("The parameter 'filterMatchMode' cannot be null.");
        else if (filterMatchMode !== undefined)
            url_ += "filterMatchMode=" + encodeURIComponent("" + filterMatchMode) + "&";
        if (tags === null)
            throw new Error("The parameter 'tags' cannot be null.");
        else if (tags !== undefined)
            tags && tags.forEach(item => { url_ += "tags=" + encodeURIComponent("" + item) + "&"; });
        if (tagsMatchMode === null)
            throw new Error("The parameter 'tagsMatchMode' cannot be null.");
        else if (tagsMatchMode !== undefined)
            url_ += "tagsMatchMode=" + encodeURIComponent("" + tagsMatchMode) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processList(_response);
        });
    }

    protected processList(response: Response): Promise<DecoratorDefinitionIEnumerableWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <DecoratorDefinitionIEnumerableWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DecoratorDefinitionIEnumerableWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    getById(id: string): Promise<DecoratorDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Decorator/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<DecoratorDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <DecoratorDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DecoratorDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(id: string, body: DecoratorDefinition | undefined): Promise<DecoratorDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Decorator/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<DecoratorDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <DecoratorDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DecoratorDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: string): Promise<BooleanWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Decorator/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<BooleanWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <BooleanWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: DecoratorDefinition | undefined): Promise<DecoratorDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Decorator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<DecoratorDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <DecoratorDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DecoratorDefinitionWrappedServiceResult>(<any>null);
    }
}

export class EngineRegistrationClient extends BaseClientProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getRegistered(): Promise<StringStringIEnumerableDictionaryWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/EngineRegistration";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetRegistered(_response);
        });
    }

    protected processGetRegistered(response: Response): Promise<StringStringIEnumerableDictionaryWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <StringStringIEnumerableDictionaryWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StringStringIEnumerableDictionaryWrappedServiceResult>(<any>null);
    }
}

export class FlowClient extends BaseClientProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    checkIntegrity(id: string): Promise<CheckResultCollectionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Flow/{id}/check";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCheckIntegrity(_response);
        });
    }

    protected processCheckIntegrity(response: Response): Promise<CheckResultCollectionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <CheckResultCollectionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CheckResultCollectionWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    getRunDefinitionById(id: string): Promise<FlowItemRunDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Flow/{id}/rundef";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetRunDefinitionById(_response);
        });
    }

    protected processGetRunDefinitionById(response: Response): Promise<FlowItemRunDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <FlowItemRunDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FlowItemRunDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    run(body: FlowItemRunDefinition | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/Flow/run";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRun(_response);
        });
    }

    protected processRun(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @param filterMatchMode (optional) 0 = StartsWith

    1 = Contains

    2 = Exact
     * @param tags (optional) 
     * @param tagsMatchMode (optional) 0 = Any

    1 = All
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    list(filter: string | undefined, filterMatchMode: FilterMatchMode | undefined, tags: string[] | undefined, tagsMatchMode: TagsMatchMode | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<FlowItemDefinitionIEnumerableWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Flow/search?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterMatchMode === null)
            throw new Error("The parameter 'filterMatchMode' cannot be null.");
        else if (filterMatchMode !== undefined)
            url_ += "filterMatchMode=" + encodeURIComponent("" + filterMatchMode) + "&";
        if (tags === null)
            throw new Error("The parameter 'tags' cannot be null.");
        else if (tags !== undefined)
            tags && tags.forEach(item => { url_ += "tags=" + encodeURIComponent("" + item) + "&"; });
        if (tagsMatchMode === null)
            throw new Error("The parameter 'tagsMatchMode' cannot be null.");
        else if (tagsMatchMode !== undefined)
            url_ += "tagsMatchMode=" + encodeURIComponent("" + tagsMatchMode) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processList(_response);
        });
    }

    protected processList(response: Response): Promise<FlowItemDefinitionIEnumerableWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <FlowItemDefinitionIEnumerableWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FlowItemDefinitionIEnumerableWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    getById(id: string): Promise<FlowItemDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Flow/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<FlowItemDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <FlowItemDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FlowItemDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(id: string, body: FlowItemDefinition | undefined): Promise<FlowItemDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Flow/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<FlowItemDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <FlowItemDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FlowItemDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: string): Promise<BooleanWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Flow/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<BooleanWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <BooleanWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: FlowItemDefinition | undefined): Promise<FlowItemDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Flow";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<FlowItemDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <FlowItemDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FlowItemDefinitionWrappedServiceResult>(<any>null);
    }
}

export class ImageClient extends BaseClientProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getImageUsage(id: string): Promise<ImageUsageCollectionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image/{id}/usage";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetImageUsage(_response);
        });
    }

    protected processGetImageUsage(response: Response): Promise<ImageUsageCollectionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ImageUsageCollectionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ImageUsageCollectionWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    checkIntegrity(id: string): Promise<CheckResultCollectionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image/{id}/check";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCheckIntegrity(_response);
        });
    }

    protected processCheckIntegrity(response: Response): Promise<CheckResultCollectionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <CheckResultCollectionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CheckResultCollectionWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    getBuildDefinitionById(id: string): Promise<ImageBuildDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image/{id}/builddef";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetBuildDefinitionById(_response);
        });
    }

    protected processGetBuildDefinitionById(response: Response): Promise<ImageBuildDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ImageBuildDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ImageBuildDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getPersisterState(body: ImageBuildDefinition | undefined): Promise<FlowItemImagePersisterStateWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image/persisterstate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetPersisterState(_response);
        });
    }

    protected processGetPersisterState(response: Response): Promise<FlowItemImagePersisterStateWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <FlowItemImagePersisterStateWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FlowItemImagePersisterStateWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    build(body: ImageBuildDefinition | undefined): Promise<ImageBuildResultWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image/build";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processBuild(_response);
        });
    }

    protected processBuild(response: Response): Promise<ImageBuildResultWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ImageBuildResultWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ImageBuildResultWrappedServiceResult>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @param filterMatchMode (optional) 0 = StartsWith

    1 = Contains

    2 = Exact
     * @param tags (optional) 
     * @param tagsMatchMode (optional) 0 = Any

    1 = All
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    list(filter: string | undefined, filterMatchMode: FilterMatchMode | undefined, tags: string[] | undefined, tagsMatchMode: TagsMatchMode | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<ImageDefinitionIEnumerableWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image/search?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterMatchMode === null)
            throw new Error("The parameter 'filterMatchMode' cannot be null.");
        else if (filterMatchMode !== undefined)
            url_ += "filterMatchMode=" + encodeURIComponent("" + filterMatchMode) + "&";
        if (tags === null)
            throw new Error("The parameter 'tags' cannot be null.");
        else if (tags !== undefined)
            tags && tags.forEach(item => { url_ += "tags=" + encodeURIComponent("" + item) + "&"; });
        if (tagsMatchMode === null)
            throw new Error("The parameter 'tagsMatchMode' cannot be null.");
        else if (tagsMatchMode !== undefined)
            url_ += "tagsMatchMode=" + encodeURIComponent("" + tagsMatchMode) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processList(_response);
        });
    }

    protected processList(response: Response): Promise<ImageDefinitionIEnumerableWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ImageDefinitionIEnumerableWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ImageDefinitionIEnumerableWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    getById(id: string): Promise<ImageDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<ImageDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ImageDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ImageDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(id: string, body: ImageDefinition | undefined): Promise<ImageDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ImageDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ImageDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ImageDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: string): Promise<BooleanWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<BooleanWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <BooleanWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    getAggregatorsById(id: string): Promise<ImageAggregatorsWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image/{id}/aggregators";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAggregatorsById(_response);
        });
    }

    protected processGetAggregatorsById(response: Response): Promise<ImageAggregatorsWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ImageAggregatorsWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ImageAggregatorsWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    getValidatorsById(id: string): Promise<ImageValidatorsWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image/{id}/validators";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetValidatorsById(_response);
        });
    }

    protected processGetValidatorsById(response: Response): Promise<ImageValidatorsWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ImageValidatorsWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ImageValidatorsWrappedServiceResult>(<any>null);
    }

    /**
     * @param aggregatorId (optional) 
     * @return Success
     */
    getWritersById(id: string, aggregatorId: string | undefined): Promise<WriterDefinitionIEnumerableWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image/{id}/writers?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (aggregatorId === null)
            throw new Error("The parameter 'aggregatorId' cannot be null.");
        else if (aggregatorId !== undefined)
            url_ += "aggregatorId=" + encodeURIComponent("" + aggregatorId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetWritersById(_response);
        });
    }

    protected processGetWritersById(response: Response): Promise<WriterDefinitionIEnumerableWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WriterDefinitionIEnumerableWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WriterDefinitionIEnumerableWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: ImageDefinition | undefined): Promise<ImageDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Image";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<ImageDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ImageDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ImageDefinitionWrappedServiceResult>(<any>null);
    }
}

export class KeysIteratorClient extends BaseClientProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getKeysIteratorUsage(id: string): Promise<KeysIteratorUsageCollectionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/KeysIterator/{id}/usage";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetKeysIteratorUsage(_response);
        });
    }

    protected processGetKeysIteratorUsage(response: Response): Promise<KeysIteratorUsageCollectionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <KeysIteratorUsageCollectionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KeysIteratorUsageCollectionWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    run(id: string, body: KeysIteratorRunDefinition | undefined): Promise<StringObjectIDictionaryIEnumerableWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/KeysIterator/run/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRun(_response);
        });
    }

    protected processRun(response: Response): Promise<StringObjectIDictionaryIEnumerableWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <StringObjectIDictionaryIEnumerableWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StringObjectIDictionaryIEnumerableWrappedServiceResult>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @param filterMatchMode (optional) 0 = StartsWith

    1 = Contains

    2 = Exact
     * @param tags (optional) 
     * @param tagsMatchMode (optional) 0 = Any

    1 = All
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    list(filter: string | undefined, filterMatchMode: FilterMatchMode | undefined, tags: string[] | undefined, tagsMatchMode: TagsMatchMode | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<KeysIteratorDefinitionIEnumerableWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/KeysIterator/search?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterMatchMode === null)
            throw new Error("The parameter 'filterMatchMode' cannot be null.");
        else if (filterMatchMode !== undefined)
            url_ += "filterMatchMode=" + encodeURIComponent("" + filterMatchMode) + "&";
        if (tags === null)
            throw new Error("The parameter 'tags' cannot be null.");
        else if (tags !== undefined)
            tags && tags.forEach(item => { url_ += "tags=" + encodeURIComponent("" + item) + "&"; });
        if (tagsMatchMode === null)
            throw new Error("The parameter 'tagsMatchMode' cannot be null.");
        else if (tagsMatchMode !== undefined)
            url_ += "tagsMatchMode=" + encodeURIComponent("" + tagsMatchMode) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processList(_response);
        });
    }

    protected processList(response: Response): Promise<KeysIteratorDefinitionIEnumerableWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <KeysIteratorDefinitionIEnumerableWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KeysIteratorDefinitionIEnumerableWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    getById(id: string): Promise<KeysIteratorDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/KeysIterator/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<KeysIteratorDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <KeysIteratorDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KeysIteratorDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(id: string, body: KeysIteratorDefinition | undefined): Promise<KeysIteratorDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/KeysIterator/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<KeysIteratorDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <KeysIteratorDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KeysIteratorDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: string): Promise<BooleanWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/KeysIterator/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<BooleanWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <BooleanWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: KeysIteratorDefinition | undefined): Promise<KeysIteratorDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/KeysIterator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<KeysIteratorDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <KeysIteratorDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KeysIteratorDefinitionWrappedServiceResult>(<any>null);
    }
}

export class RedisCacheClient extends BaseClientProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    isConfigured(): Promise<BooleanWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/RedisCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processIsConfigured(_response);
        });
    }

    protected processIsConfigured(response: Response): Promise<BooleanWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <BooleanWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    clear(): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/RedisCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processClear(_response);
        });
    }

    protected processClear(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class SourceDefinitionClient extends BaseClientProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param sourceType (optional) 
     * @return Success
     */
    getDecoratorSourceArguments(sourceType: string | undefined): Promise<ArgumentIEnumerableWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/SourceDefinition/decorator/args?";
        if (sourceType === null)
            throw new Error("The parameter 'sourceType' cannot be null.");
        else if (sourceType !== undefined)
            url_ += "sourceType=" + encodeURIComponent("" + sourceType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetDecoratorSourceArguments(_response);
        });
    }

    protected processGetDecoratorSourceArguments(response: Response): Promise<ArgumentIEnumerableWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ArgumentIEnumerableWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ArgumentIEnumerableWrappedServiceResult>(<any>null);
    }

    /**
     * @param sourceType (optional) 
     * @return Success
     */
    getKeysIteratorSourceArguments(sourceType: string | undefined): Promise<ArgumentIEnumerableWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/SourceDefinition/keysiterator/args?";
        if (sourceType === null)
            throw new Error("The parameter 'sourceType' cannot be null.");
        else if (sourceType !== undefined)
            url_ += "sourceType=" + encodeURIComponent("" + sourceType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetKeysIteratorSourceArguments(_response);
        });
    }

    protected processGetKeysIteratorSourceArguments(response: Response): Promise<ArgumentIEnumerableWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ArgumentIEnumerableWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ArgumentIEnumerableWrappedServiceResult>(<any>null);
    }
}

export class ValidatorClient extends BaseClientProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getValidatorUsage(id: string): Promise<ValidatorUsageCollectionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Validator/{id}/usage";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetValidatorUsage(_response);
        });
    }

    protected processGetValidatorUsage(response: Response): Promise<ValidatorUsageCollectionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ValidatorUsageCollectionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValidatorUsageCollectionWrappedServiceResult>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @param filterMatchMode (optional) 0 = StartsWith

    1 = Contains

    2 = Exact
     * @param tags (optional) 
     * @param tagsMatchMode (optional) 0 = Any

    1 = All
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    list(filter: string | undefined, filterMatchMode: FilterMatchMode | undefined, tags: string[] | undefined, tagsMatchMode: TagsMatchMode | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<ValidatorDefinitionIEnumerableWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Validator/search?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterMatchMode === null)
            throw new Error("The parameter 'filterMatchMode' cannot be null.");
        else if (filterMatchMode !== undefined)
            url_ += "filterMatchMode=" + encodeURIComponent("" + filterMatchMode) + "&";
        if (tags === null)
            throw new Error("The parameter 'tags' cannot be null.");
        else if (tags !== undefined)
            tags && tags.forEach(item => { url_ += "tags=" + encodeURIComponent("" + item) + "&"; });
        if (tagsMatchMode === null)
            throw new Error("The parameter 'tagsMatchMode' cannot be null.");
        else if (tagsMatchMode !== undefined)
            url_ += "tagsMatchMode=" + encodeURIComponent("" + tagsMatchMode) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processList(_response);
        });
    }

    protected processList(response: Response): Promise<ValidatorDefinitionIEnumerableWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ValidatorDefinitionIEnumerableWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValidatorDefinitionIEnumerableWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    getById(id: string): Promise<ValidatorDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Validator/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<ValidatorDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ValidatorDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValidatorDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(id: string, body: ValidatorDefinition | undefined): Promise<ValidatorDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Validator/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ValidatorDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ValidatorDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValidatorDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: string): Promise<BooleanWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Validator/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<BooleanWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <BooleanWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: ValidatorDefinition | undefined): Promise<ValidatorDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Validator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<ValidatorDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ValidatorDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValidatorDefinitionWrappedServiceResult>(<any>null);
    }
}

export class WriterClient extends BaseClientProxy {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getWriterUsage(id: string): Promise<WriterUsageCollectionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Writer/{id}/usage";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetWriterUsage(_response);
        });
    }

    protected processGetWriterUsage(response: Response): Promise<WriterUsageCollectionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WriterUsageCollectionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WriterUsageCollectionWrappedServiceResult>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @param filterMatchMode (optional) 0 = StartsWith

    1 = Contains

    2 = Exact
     * @param tags (optional) 
     * @param tagsMatchMode (optional) 0 = Any

    1 = All
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    list(filter: string | undefined, filterMatchMode: FilterMatchMode | undefined, tags: string[] | undefined, tagsMatchMode: TagsMatchMode | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<WriterDefinitionIEnumerableWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Writer/search?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterMatchMode === null)
            throw new Error("The parameter 'filterMatchMode' cannot be null.");
        else if (filterMatchMode !== undefined)
            url_ += "filterMatchMode=" + encodeURIComponent("" + filterMatchMode) + "&";
        if (tags === null)
            throw new Error("The parameter 'tags' cannot be null.");
        else if (tags !== undefined)
            tags && tags.forEach(item => { url_ += "tags=" + encodeURIComponent("" + item) + "&"; });
        if (tagsMatchMode === null)
            throw new Error("The parameter 'tagsMatchMode' cannot be null.");
        else if (tagsMatchMode !== undefined)
            url_ += "tagsMatchMode=" + encodeURIComponent("" + tagsMatchMode) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processList(_response);
        });
    }

    protected processList(response: Response): Promise<WriterDefinitionIEnumerableWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WriterDefinitionIEnumerableWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WriterDefinitionIEnumerableWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    getById(id: string): Promise<WriterDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Writer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<WriterDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WriterDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WriterDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(id: string, body: WriterDefinition | undefined): Promise<WriterDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Writer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<WriterDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WriterDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WriterDefinitionWrappedServiceResult>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: string): Promise<BooleanWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Writer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<BooleanWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <BooleanWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanWrappedServiceResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: WriterDefinition | undefined): Promise<WriterDefinitionWrappedServiceResult> {
        let url_ = this.baseUrl + "/api/v1/Writer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<WriterDefinitionWrappedServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WriterDefinitionWrappedServiceResult>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WriterDefinitionWrappedServiceResult>(<any>null);
    }
}

export interface AggregatorDefinition {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    tags?: string[] | undefined;
    image?: string | undefined;
    kind?: string | undefined;
    config?: { [key: string]: any; } | undefined;
}

export interface AggregatorDefinitionIEnumerableWrappedServiceResult {
    Result?: AggregatorDefinition[] | undefined;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface AggregatorDefinitionWrappedServiceResult {
    Result?: AggregatorDefinition;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface Argument {
    name?: string | undefined;
    description?: string | undefined;
    optional?: boolean;
}

export interface ArgumentIEnumerableWrappedServiceResult {
    Result?: Argument[] | undefined;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface ArgumentValue {
    value?: any | undefined;
    name?: string | undefined;
    description?: string | undefined;
    optional?: boolean;
}

export interface BooleanWrappedServiceResult {
    Result?: boolean;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

/** 0 = KeysIterator 1 = Decorator 2 = Image 3 = Validator 4 = Aggregator 5 = Writer 6 = Flow */
export enum CheckArea {
    KeysIterator = 0,
    Decorator = 1,
    Image = 2,
    Validator = 3,
    Aggregator = 4,
    Writer = 5,
    Flow = 6,
}

export interface CheckResultCollection {
    readonly hasErrors?: boolean;
    readonly items?: CheckResultItem[] | undefined;
}

export interface CheckResultCollectionWrappedServiceResult {
    Result?: CheckResultCollection;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface CheckResultItem {
    ts?: string;
    area?: CheckArea;
    level?: CheckResultLevel;
    message?: string | undefined;
    id?: string | undefined;
}

/** 0 = Info 1 = Warning 2 = Error */
export enum CheckResultLevel {
    Info = 0,
    Warning = 1,
    Error = 2,
}

export interface DecoratorDefinition {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    tags?: string[] | undefined;
    args?: Argument[] | undefined;
    when?: string | undefined;
    fields?: OutputField[] | undefined;
    source?: DecoratorSourceDefinition;
}

export interface DecoratorDefinitionIEnumerableWrappedServiceResult {
    Result?: DecoratorDefinition[] | undefined;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface DecoratorDefinitionWrappedServiceResult {
    Result?: DecoratorDefinition;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface DecoratorSourceDefinition {
    type?: string | undefined;
    args?: { [key: string]: string; } | undefined;
}

export interface DecoratorUsageCollection {
    readonly items?: DecoratorUsageItem[] | undefined;
    subject?: ObjectDefinitionDescriptor;
}

export interface DecoratorUsageCollectionWrappedServiceResult {
    Result?: DecoratorUsageCollection;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface DecoratorUsageItem {
    image?: ObjectDefinitionDescriptor;
    fields?: string[] | undefined;
    flows?: ObjectDefinitionDescriptor[] | undefined;
}

/** 0 = StartsWith 1 = Contains 2 = Exact */
export enum FilterMatchMode {
    StartsWith = 0,
    Contains = 1,
    Exact = 2,
}

export interface FlowItemDefinition {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    tags?: string[] | undefined;
    image?: string | undefined;
    aggregator?: string | undefined;
    validator?: string | undefined;
    writer?: string | undefined;
}

export interface FlowItemDefinitionIEnumerableWrappedServiceResult {
    Result?: FlowItemDefinition[] | undefined;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface FlowItemDefinitionWrappedServiceResult {
    Result?: FlowItemDefinition;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface FlowItemImagePersisterState {
    IsNew?: boolean;
    Layers?: string[] | undefined;
    KeysExists?: boolean;
    RowsExists?: boolean;
    AggregationExists?: boolean;
    LayerStepRequested?: boolean;
    LayerStepName?: string | undefined;
    RowStepRequested?: boolean;
    AggregationStepRequested?: boolean;
}

export interface FlowItemImagePersisterStateWrappedServiceResult {
    Result?: FlowItemImagePersisterState;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface FlowItemRunDefinition {
    flow?: FlowItemDefinition;
    imageargs?: ArgumentValue[] | undefined;
    writerargs?: ArgumentValue[] | undefined;
    keyslimit?: number | undefined;
    persister?: ImageBuildPersisterDefinition;
}

export interface FlowItemRunDefinitionWrappedServiceResult {
    Result?: FlowItemRunDefinition;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface ImageAggregators {
    aggregators?: AggregatorDefinition[] | undefined;
    imagefields?: string[] | undefined;
}

export interface ImageAggregatorsWrappedServiceResult {
    Result?: ImageAggregators;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface ImageBuildDefinition {
    image?: ImageDefinition;
    availableaggregators?: AggregatorDefinition[] | undefined;
    availablevalidators?: ValidatorDefinition[] | undefined;
    aggregator?: AggregatorDefinition;
    validator?: ValidatorDefinition;
    args?: ArgumentValue[] | undefined;
    keyslimit?: number | undefined;
    enablewatch?: boolean | undefined;
    persister?: ImageBuildPersisterDefinition;
}

export interface ImageBuildDefinitionWrappedServiceResult {
    Result?: ImageBuildDefinition;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface ImageBuildPersisterDefinition {
    enabled?: boolean;
    buildstep?: string | undefined;
}

export interface ImageBuildResult {
    rows?: { [key: string]: any; }[] | undefined;
    watcheritemlogs?: ImageWatcherItemLog[] | undefined;
}

export interface ImageBuildResultWrappedServiceResult {
    Result?: ImageBuildResult;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface ImageDefinition {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    filter?: string | undefined;
    tags?: string[] | undefined;
    keys?: ImageKeysIteratorsDefinition[] | undefined;
    layers?: LayerDefinition[] | undefined;
}

export interface ImageDefinitionIEnumerableWrappedServiceResult {
    Result?: ImageDefinition[] | undefined;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface ImageDefinitionWrappedServiceResult {
    Result?: ImageDefinition;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface ImageKeysIteratorsDefinition {
    keyid?: string | undefined;
    args?: { [key: string]: string; } | undefined;
    fields?: { [key: string]: string; } | undefined;
}

export interface ImageUsageCollection {
    readonly items?: ImageUsageItem[] | undefined;
    subject?: ObjectDefinitionDescriptor;
}

export interface ImageUsageCollectionWrappedServiceResult {
    Result?: ImageUsageCollection;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface ImageUsageItem {
    flows?: ObjectDefinitionDescriptor[] | undefined;
}

export interface ImageValidators {
    validators?: ValidatorDefinition[] | undefined;
    imagefields?: string[] | undefined;
}

export interface ImageValidatorsWrappedServiceResult {
    Result?: ImageValidators;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface ImageWatcherItemLog {
    image?: string | undefined;
    layer?: string | undefined;
    decorator?: string | undefined;
    field?: string | undefined;
    start?: string;
    stop?: string;
    elapsed?: number;
}

export interface KeysIteratorDefinition {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    tags?: string[] | undefined;
    args?: Argument[] | undefined;
    fields?: OutputField[] | undefined;
    when?: string | undefined;
    filter?: string | undefined;
    source?: KeysIteratorSourceDefinition;
}

export interface KeysIteratorDefinitionIEnumerableWrappedServiceResult {
    Result?: KeysIteratorDefinition[] | undefined;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface KeysIteratorDefinitionWrappedServiceResult {
    Result?: KeysIteratorDefinition;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface KeysIteratorRunDefinition {
    args?: ArgumentValue[] | undefined;
    keyslimit?: number | undefined;
}

export interface KeysIteratorSourceDefinition {
    type?: string | undefined;
    args?: { [key: string]: string; } | undefined;
}

export interface KeysIteratorUsageCollection {
    readonly items?: KeysIteratorUsageItem[] | undefined;
    subject?: ObjectDefinitionDescriptor;
}

export interface KeysIteratorUsageCollectionWrappedServiceResult {
    Result?: KeysIteratorUsageCollection;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface KeysIteratorUsageItem {
    image?: ObjectDefinitionDescriptor;
    keys?: ObjectDefinitionDescriptor[] | undefined;
    flows?: ObjectDefinitionDescriptor[] | undefined;
}

export interface LayerDefinition {
    name?: string | undefined;
    items?: LayerFieldItemDefinition[] | undefined;
}

export interface LayerFieldItemDefinition {
    field?: string | undefined;
    config?: any | undefined;
}

export interface ObjectDefinitionDescriptor {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
}

export interface OutputField {
    name?: string | undefined;
    selector?: string | undefined;
    type?: string | undefined;
    format?: string | undefined;
    value?: any | undefined;
}

export interface StringObjectIDictionaryIEnumerableWrappedServiceResult {
    Result?: { [key: string]: any; }[] | undefined;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface StringObjectIDictionaryWrappedServiceResult {
    Result?: { [key: string]: any; } | undefined;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface StringStringIEnumerableDictionaryWrappedServiceResult {
    Result?: { [key: string]: string[]; } | undefined;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

/** 0 = Any 1 = All */
export enum TagsMatchMode {
    Any = 0,
    All = 1,
}

export interface ValidatorDefinition {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    tags?: string[] | undefined;
    kind?: string | undefined;
    config?: { [key: string]: any; } | undefined;
}

export interface ValidatorDefinitionIEnumerableWrappedServiceResult {
    Result?: ValidatorDefinition[] | undefined;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface ValidatorDefinitionWrappedServiceResult {
    Result?: ValidatorDefinition;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface ValidatorUsageCollection {
    readonly items?: ValidatorUsageItem[] | undefined;
    subject?: ObjectDefinitionDescriptor;
}

export interface ValidatorUsageCollectionWrappedServiceResult {
    Result?: ValidatorUsageCollection;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface ValidatorUsageItem {
    validators?: ObjectDefinitionDescriptor[] | undefined;
    flows?: ObjectDefinitionDescriptor[] | undefined;
}

export interface WrappedServiceResultError {
    Code?: number;
    Message?: string | undefined;
}

export interface WriterDefinition {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    tags?: string[] | undefined;
    kind?: string | undefined;
    args?: Argument[] | undefined;
    config?: { [key: string]: any; } | undefined;
}

export interface WriterDefinitionIEnumerableWrappedServiceResult {
    Result?: WriterDefinition[] | undefined;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface WriterDefinitionWrappedServiceResult {
    Result?: WriterDefinition;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface WriterUsageCollection {
    readonly items?: WriterUsageItem[] | undefined;
    subject?: ObjectDefinitionDescriptor;
}

export interface WriterUsageCollectionWrappedServiceResult {
    Result?: WriterUsageCollection;
    readonly Status?: boolean;
    readonly Errors?: WrappedServiceResultError[] | undefined;
    readonly IsWrappedResult?: boolean;
}

export interface WriterUsageItem {
    writers?: ObjectDefinitionDescriptor[] | undefined;
    flows?: ObjectDefinitionDescriptor[] | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}